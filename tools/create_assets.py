#!/usr/bin/python

# Requires Python v3 Interpreter

# Read all the files in 'data', and create assets.inl with all the data.  For
# text file, we try to keep the data as a string, for binary files we store it
# into a uint8_t array.

from collections import namedtuple
import os
import sys

CWD = os.getcwd()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)

if CWD != PROJECT_ROOT:
	print("Error: Run the script from project root, i.e.", PROJECT_ROOT)
	sys.exit(-1)

TYPES = {
	"png":   { "text": False, },
	"goxcf": { "text": True,  },
	"gpl":   { "text": True,  },
	"pov":   { "text": True,  },
	"ttf":   { "text": False  },
	"wav":   { "text": False  },
	"ini":   { "text": True   },
	"glsl":  { "text": True   },
	"gox":   { "text": False  },
	"lua":   { "text": True   },
}

GROUPS = [
	'fonts', 'icons', 'images',
	'other', 'palettes', 'progs',
	'shaders', 'sounds', 'themes',
	'samples', 'mobile'
]

TEMPLATE = '{{\n.path = "{path}",\n.size = {size},\n.data = {data}\n}},\n\n'
File = namedtuple('File', 'path name data size')

HEADER = "/* This file is autogenerated by tools/create_assets.py */"

def list_files(group):
	ret = []
	for root, dirs, files in os.walk("data/%s" % group):
		for f in files:
			if any(f.endswith('.' + x) for x in TYPES):
				ret.append(os.path.join(root, f))

	return sorted(ret, key=lambda x: x.upper())

def encode_str(data):
	data = data.decode()
	ret = '\n\t"'
	for c in data:
		if c == '\n':
			ret += '\\n"\n\t"'
			continue

		if c == '"': c = '\\"'
		if c == '\\': c = '\\\\'
		ret += c

	ret += '"'
	return ret

def encode_bin(data):
	ret = "(const uint8_t[]) {\n"
	line = ""
	for i, c in enumerate(data):
		line += "{},".format(c)
		if len(line) >= 70 or i == len(data) - 1:
			ret += "\t" + line + "\n"
			line = ""

	ret += "}"
	return ret;

def create_file(f):
	data = open(f, 'rb').read()
	size = len(data)
	name = f.replace('/', '_').replace('.', '_').replace('-', '_')
	ext = f.split(".")[-1]

	if TYPES[ext]['text']:
		size += 1 # So that we NULL terminate the string.
		data = encode_str(data)
	else:
		data = encode_bin(data)

	return File(f, name, data, size)

for group in GROUPS:
	files = []

	for f in list_files(group):
		files.append(create_file(f))
	if not files:
		continue

	out = open("src/assets/%s.inl" % group, "w")

	out.write(HEADER)
	out.write("\n\n")

	for f in files:
		out.write(TEMPLATE.format(**f._asdict()))

	out.write("\n\n")
